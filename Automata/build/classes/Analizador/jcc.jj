options 
{STATIC = false ;} 
PARSER_BEGIN(jcc)
package Analizador;
class jcc{
	public void arranque () {
		
		String r="";
		try
		{
			jcc analizador = new jcc (System.in);
			
			analizador.Iniciar();
			r="La cadena fue aceptada correctamente";
			
			
		}catch(ParseException e){
			r="La cadena NO fue aceptada"+" ERROR: "+e.getMessage();
			//System.out.println(e.getMessage());
			
		}
		System.out.println(r);
		
	}
}
PARSER_END(jcc)

SKIP :
{
	" " | "\t" | "\n" | "\r"
}
TOKEN :
{
<#L: ["a"-"z","A"-"Z"]>
|<#May: ["A"-"Z"]>
|<#Min: ["a"-"z"]>
|<#D: ["0"-"9"]>
|<#gb: ["_"]>
|<#S: ["_","-"]>

						
}
TOKEN :
{
	
		<Expresion:(((<May>)|(<gb>))
		(
	
		 (((<D>)(<D>)((<L>)|(<S>))+(<L>)+)                    (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |(((<D>)((<L>)|(<S>))+((<L>)|(<S>))+((<D>)))         (((<D>))| ((((<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?                              )
		 |((<D>)((<L>)|(<S>))+((<D>))((<L>)+)                 (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |(((<L>)|(<S>))+((<D>))((<L>)|(<S>))+((<D>))         (((<D>))| ((((<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?                              )
		 |(((<L>)|(<S>))+(((<L>)|(<S>))+(<D>)(<D>))           (((((<L>)))+((<D>)?(<D>)?))| (((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?                                                       )
		 |((<D>)((<L>)|(<S>))+(<D>)(<D>)                      (((((<L>)))+((<D>)?(<D>)?))| (((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?                                                       )
		 |((<D>)(<D>)((<L>)|(<S>))+((<D>))                    (((<D>))| ((((<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?                              )
		 |(((<L>)|(<S>))+((<D>)(<D>))+(<L>)+                  (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |(((<L>)|(<S>))+((<L>)|(<S>))+((<L>)|(<S>))+(<L>)+   (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |((<D>)((<L>)|(<S>))+((<L>)|(<S>))+((<L>))+          (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |(((<L>)|(<S>))+(<D>)((<L>)|(<S>))+(<L>)+            (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |(((<L>)|(<S>))+((<L>)|(<S>))+(<D>)(<L>)+            (((<D>)|(<D>)(<D>))| ((((<D>)?(<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?(<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?       )
		 |(((<L>)|(<S>))+((<L>)|(<S>))+(<L>)+(<D>)            (((<D>))| ((((<D>)?)((<L>)))+((<D>)?(<D>)?))| (((<D>)?)((<L>)|(<S>))+(((<D>)(<D>)?) |(<L>)+)))?                              )
		))>
		
		
	
		
	
	
}
void Iniciar() : {} {
( exprBasica())+
}
void exprBasica() :{}{ 
<Expresion><EOF>
}
